# -*- coding: utf-8 -*-
"""python_assignment_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PsAU0MGIZCN6z1KTeUUg7oo8FL3RA0hz
"""

##Q1. Which keyword is used to create a function? Create a function to return a list of odd numbers in the ;range of 1 to 25.

#### def keyword is used to define the function
def odds():
  l = []
  for i in range(1,26):
    if i % 2 != 0:
      l.append(i)
  return(l)
print(odds())

###we can use filter method along with lambda function to create same kind of function
### lambda function is also called short hand function in python
o = range(1,26)
odd_numbers = list(filter(lambda x: x%2 !=0,o ))
print(odd_numbers)

###Q2. Why *args and **kwargs is used in some functions? Create a function each for *args and **kwargs to

### ==> args - args stands for variable arguments passed in statement, it collects this arguments tuple within function.

def sum_args(*args):
  total = 0
  for arg in args:
    total += arg
  return total

print(sum_args(1,2,3,4,5,6))

### ==> *Kwargs - it stands for keyword argumnet which stored as key value pair within function.

def concat_kwargs(**kwargs):
    result = ""
    for key, value in kwargs.items():
        result += f"{key}: {value}, "
    return result[:-2]

print(concat_kwargs(name="Alice", age=30, city="New York"))

###Q3. What is an iterator in python? Name the method used to initialise the iterator object and the method used for iteration. Use these methods to print the first five elements of the given list [2, 4, 6, 8, 10, 12, 14, 16,18, 20].

"""In Python, an iterator is an object that implements the iterator protocol, which consists of two methods:
__iter__(): This method initializes the iterator object. It returns the iterator object itself.
__next__(): This method is used for iteration. It returns the next element from the iterator. When there are no more elements to return, it raises the StopIteration exception.
Here's how you can use these methods to print the first five elements of the given list [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]:"""


# Define an iterator class for the given list
class MyIterator:
    def __init__(self, data):
        self.data = data
        self.index = 0

    def __iter__(self):
        return self

    def __next__(self):
        if self.index < len(self.data):
            value = self.data[self.index]
            self.index += 1
            return value
        else:
            raise StopIteration

# Initialize the iterator object
iterator = MyIterator([2, 4, 6, 8, 10, 12, 14, 16, 18, 20])

# Iterate over the first five elements using the iterator
for _ in range(5):
    print(next(iterator))

###Q4. What is a generator function in python? Why yield keyword is used? Give an example of a generator function.

"""A generator function in Python is a special type of function that returns an iterator, allowing it to generate a sequence of values lazily, on-the-fly, rather than storing them in memory all at once. Generator functions use the yield keyword to produce a series of values over time. When a generator function is called, it returns a generator object, which can then be iterated over to retrieve values one at a time.

The yield keyword is used in generator functions to produce a value to be returned to the caller, similar to the return statement. However, unlike return, yield suspends the function's execution, preserving its state, allowing it to resume from where it left off when called again. This enables generators to efficiently generate large sequences of values without consuming excessive memory.
"""

def even_num(a):
  num = 0
  while num < a:
    yield num
    num += 2

generator = even_num(10)

for i in generator:
  print(i)

###Q5. Create a generator function for prime numbers less than 1000. Use the next() method to print the first 20 prime numbers.

def is_prime(num):
    if num <= 1:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

def prime_numbers():
    num = 2
    while num < 1000:
        if is_prime(num):
            yield num
        num += 1

# Demonstration of printing the first 20 prime numbers
generator = prime_numbers()
for _ in range(20):
    print(next(generator))

